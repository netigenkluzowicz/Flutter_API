part of '../utils.dart';

/// red (iOS ðŸ”´)
void printR(Object? object) => _print(object.toString(), "R");

/// green (iOS ðŸŸ¢)
void printG(Object? object) => _print(object.toString(), "G");

/// yellow (iOS ðŸŸ¡)
void printY(Object? object) => _print(object.toString(), "Y");

/// blue (iOS ðŸ”µ)
void printB(Object? object) => _print(object.toString(), "B");

/// magenta (iOS ðŸŸ¥)
void printM(Object? object) => _print(object.toString(), "M");

/// cyan (iOS ðŸŸ¨)
void printC(Object? object) => _print(object.toString(), "C");

/// white (iOS âšª)
void printW(Object? object) => _print(object.toString(), "W");

void _print(String text, String color) {
  if (kReleaseMode) return;
  if (kIsWeb || Platform.isAndroid) {
    switch (color) {
      case 'R':
        _printLines("\x1B[31m", text, "\x1B[0m");
        break;
      case 'G':
        _printLines("\x1B[32m", text, "\x1B[0m");
        break;
      case 'Y':
        _printLines("\x1B[33m", text, "\x1B[0m");
        break;
      case 'B':
        _printLines("\x1B[34m", text, "\x1B[0m");
        break;
      case 'M':
        _printLines("\x1B[35m", text, "\x1B[0m");
        break;
      case 'C':
        _printLines("\x1B[36m", text, "\x1B[0m");
        break;
      case 'W':
        _printLines("\x1B[37m", text, "\x1B[0m");
        break;
      default:
        _printLines("", text, "");
    }
  } else {
    switch (color) {
      case 'R':
        _printLines("ðŸ”´ ", text, "");
        break;
      case 'G':
        _printLines("ðŸŸ¢ ", text, "");
        break;
      case 'Y':
        _printLines("ðŸŸ¡ ", text, "");
        break;
      case 'B':
        _printLines("ðŸ”µ ", text, "");
        break;
      case 'M':
        _printLines("ðŸŸ¥ ", text, "");
        break;
      case 'C':
        _printLines("ðŸŸ¨ ", text, "");
        break;
      case 'W':
        _printLines("âšª ", text, "");
        break;
      default:
        _printLines("", text, "");
    }
  }
}

void _printLines(String start, String text, String end) {
  if (kDebugMode || kProfileMode) {
    text.split("\n").forEach((element) {
      // ignore: avoid_print
      print("$start[dev]$element$end");
    });
  }
}
